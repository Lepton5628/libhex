#!/bin/sh

#  make.sh
#  hex
#
#  Created by Max C on 8/17/15.
#  Copyright (c) 2015 Max C. All rights reserved.

# Paths of files and directories
INCLUDE=`pwd`'/include'
BUILD='build'
OBJ='build/obj'
LIB='build/libhex.a'

# Commands for various Tools
MKDIR='mkdir'
MKDIRFLAGS='-p'
AR='ar'
ARFLAGS='rcvs'
CC='g++'
RM='rm -f'
RMDIR='rm -rf'

# Flags to pass
CCFLAGS_NORMAL="-O2 -I$INCLUDE"
CCFLAGS_DEBUG="$CCFLAGS_NORMAL -g"
# Note: change for prod
CCFLAGS=$CCFLAGS_DEBUG

OBJECTS=''

SANITIZE=1

failure(){
    echo "\a"

    if [[ SANITIZE -eq 0 ]]; then
        echo "\n\tError: $1\n"
    else
        echo "\n\t\x1b[38;5;9mError: $1\x1b[0m\n"
    fi

    exit 1
}

green(){
    if [[ SANITIZE -eq 0 ]]; then
        echo "\t$1"
    else
        echo "\t\x1b[38;5;10m$1\x1b[0m"
    fi
}

check_dependency(){
    if gcc -o tests/deps/build/$1 tests/deps/src/$1.c > tests/deps/build/error 2>&1; then
        if tests/deps/build/$1; then
            green "Your installation of $1 is working!"
        else
            failure "Your installation of $1 is not working"
        fi
    else
        failure "You do not have $1 installed. Error: \n $( cat tests/deps/build/error )"
    fi
}

deps(){
    echo "\tChecking dependencies..."

    check_dependency arc4random
    check_dependency termios
    check_dependency ioctl

    echo "\tDone"
}

compile_directory() {
    echo "Compiling Directory $1"
    if ! $MKDIR $OBJ/$1 ; then
        failure "Could not create object directory"
    fi
	FILES='';
	for fname in `ls -G $1`; do
		FILES="$FILES ${fname%%.*}"
	done;
	for sfile in $FILES; do
		if [[ -d $1/$sfile ]]; then
            if ! [[ -e $1/$sfile/make ]]; then
                compile_directory $1/$sfile
            fi
		else
            echo "Compiling file $1/$sfile"
            if ! $CC -c -o $OBJ/$1/$sfile.o $CCFLAGS $1/$sfile.mm ; then
                failure "Could not compile file"
            fi
			OBJECTS="$OBJECTS $OBJ/$1/$sfile.o";
		fi
	done
}

configure(){
    touch "$INCLUDE/config-def.h"

    echo "#ifndef HEX_CONFIG_DEF_H" >> $INCLUDE/config-def.h
    echo "#define HEX_CONFIG_DEF_H" >> $INCLUDE/config-def.h
    echo "" >> $INCLUDE/config-def.h
#
#    echo "Pick an output mode to use:"
#    echo "1) TTY Output. Unix Only"
#    echo "2) SDL Output. Cross Platform"
#    echo "3) Cocoa Output. OS X Platform"
#    echo "4) QuickTime Output. Cross Platform"
#    read option

    option=1
    case $option in
        1)
            echo "#define OUTPUT_MODE OUTPUT_MODE_TTY" >> $INCLUDE/config-def.h;;
        2)
            echo "#define OUTPUT_MODE OUTPUT_MODE_SDL" >> $INCLUDE/config-def.h;;
        3)
            echo "#define OUTPUT_MODE OUTPUT_MODE_COCOA" >> $INCLUDE/config-def.h;;
        4)
            echo "#define OUTPUT_MODE OUTPUT_MODE_QT" >> $INCLUDE/config-def.h;;
        *)
            echo "Invalid option"
    esac

    echo "" >> $INCLUDE/config-def.h
    echo "#endif" >> $INCLUDE/config-def.h
}

link_objects(){
    echo "\n\tLinking Objects\n"

    if ! $AR $ARFLAGS $LIB $OBJECTS; then
        failure "Could not link object files"
    fi
}

initbdir(){
    echo "\n\tCreating build directory..."
    if ! $MKDIR $BUILD ; then
        failure "Could not create build directory"
    fi
    if ! $MKDIR $OBJ ; then
        failure "Could not create build object directory"
    fi
    echo "\tDone.\n"
}

clean(){
    echo "\n\tCleaning Project..."
    if ! $RMDIR $BUILD; then
        failure "Could not remove the build directory"
    fi
    if ! $RM $INCLUDE/config-def.h; then
        failure "Could not remove autogenerated config file"
    fi
    echo "\tDone\n"
}

info(){
    echo ""
    if [[ SANITIZE -eq 0 ]]; then
        echo "\t\tAdvanced Build System\n\t\tBy Max Cura"
    else
        echo "\t\t\x1b[38;5;15;1mAdvanced Build System\n\t\tBy Max Cura\x1b[0m"
    fi
    echo ""
    echo "\tInclude Directory: $INCLUDE"
    echo "\tBuild Directory: $BUILD"
    echo "\tObject Directory: $OBJ"
    echo "\tLibrary File: $LIB"
    echo ""
    echo "\tCCFLAGS: $CCFLAGS"
    echo ""
}

all(){
    if test "$BASH_ARGV" = "sanitize"; then
        SANITIZE=0
    else
        SANITIZE=1
    fi

    deps

    info

    clean

    if ! [[ -e $INCLUDE/config-def.h ]]; then
        configure
    fi

    initbdir

	compile_directory src
    link_objects

    if [[ SANITIZE -eq 0 ]]; then
        echo "\n\tFINISHED BUILDING\n"
    else
        echo "\n\t\x1b[38;5;10mFINISHED BUILDING\x1b[0m\n"
    fi
}

all
